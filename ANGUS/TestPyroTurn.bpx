' {$STAMP BS2px}
' {$PBASIC 2.5}
'This is a skeletal program for driving Buffalo, the Frontier fire-fighting robot.

'--------------------------------------------------------------------------
'Variable declarations
'
'The BS2px has only 26 byte variables available, so we need to keep track
'of how many we have used.  It might be necessary to use one variable for
'several purposes.  When we do this, we can alias the variable, using
'different meaningful names for it depending on how we are using it.
'(This is really for our benefit, since the computer does not care what
'we call a variable.)  When we alias a variable, however, we need to
'make sure that we are not using the the same variable in two different
'ways in same section of code.

  'Communication string variables
  Cmmd VAR Byte    'Holds command code to motor controller
  Addr VAR Byte    'Holds register address in motor controller
  Leng VAR Byte    'Holds the length of the data to be transmitted
  Cksum VAR Byte   'Holds the checksum for the communication string to the motor controller
  Data1 VAR Byte   'Holds the data input from the motor controller

  'Motor speed
  LeftSpeed VAR Word  'Speed of left motor
  RightSpeed VAR Word 'Speed of right motor

  'Sensor variables
  SDA     CON 0           ' SDA on pin13, SCL on pin14
  Ver     VAR Byte
  Ambient VAR Byte
  Pix1    VAR Byte
  Pix2    VAR Byte
  Pix3    VAR Byte
  Pix4    VAR Byte
  Pix5    VAR Byte
  Pix6    VAR Byte
  Pix7    VAR Byte
  Pix8    VAR Byte
  Found   VAR Ver

  PYRO_THRESH CON 6

  I_O_DIR  CON %1100000100000001   'I/O pin directions
  I_O_PULL CON %0001011000000000   'Pullup (PU) resistor configurations
  I_O_INIT CON %0000000100000001   'Initial output settings
  BUMPER_MASK CON %00001110  'Mask to extract bumper switch inputs
  HIT_FRONT CON %00000110        'Bumper switch value for a front hit
  HIT_FRONT_LEFT CON %00000010   'Bumper switch value for a front left hit
  HIT_FRONT_RIGHT CON %00000100  'Bumper switch value for a front right hit
  HIT_LEFT CON %00001010         'Bumper switch value for a left hit
  HIT_RIGHT CON %00001100        'Bumper switch value for a right hit
  HIT_BACK CON %00001000         'Bumper switch value for a back hit
  UV_MASK CON %01000000          'Mask to extract UV

  WHITE_LINE_MASK CON %00000010  'Mask to extract white line input

  WhiteLine VAR Byte       'White line sensor

  DISTANCE_SENSOR_TRIGGER CON 0     'Distance sensor trigger pin
  DISTANCE_SENSOR_FRONT CON 3       'Front distance sensor input pin
  DISTANCE_SENSOR_FRONT_LEFT CON 3  'Front distance sensor input pin
  DISTANCE_SENSOR_FRONT_RIGHT CON 3 'Front distance sensor input pin
  DISTANCE_SENSOR_BACK_LEFT CON 1   'Front distance sensor input pin
  DISTANCE_SENSOR_BACK_RIGHT CON 2  'Front distance sensor input pin
  DISTANCE_TOO_FAR CON 1000         'Max distance from wall
  DISTANCE_TOO_NEAR CON 600         'Min distance from wall

  FAN CON 15  'Fan control pin

  'Motor controller constants
  BAUD CON 86    'Serial transmission speed to motor controller
  TM CON 7       'Pin number of receiving data from motor controller
  FM CON 8       'Pin number for transmitting data to the motor controller

  'Speed control constants
  FORWARD_LEFT_FAST CON 400
  FORWARD_RIGHT_FAST CON -400
  BACKWARD_LEFT_FAST CON -400
  BACKWARD_RIGHT_FAST CON 400
  'MOTOR_ADJUST CON 100
  'MOTOR_ADJUST CON 50
  'MOTOR_ADJUST CON 50
 ' FORWARD_LEFT_FAST CON 500
  'FORWARD_RIGHT_FAST CON -500-MOTOR_ADJUST
  'BACKWARD_LEFT_FAST CON -500
  'BACKWARD_RIGHT_FAST CON 500
    MOTOR_ADJUST CON 36 'was 33 originally
  'FORWARD_LEFT_FAST CON 400
  'FORWARD_RIGHT_FAST CON -400-MOTOR_ADJUST
  'BACKWARD_LEFT_FAST CON -400
  'BACKWARD_RIGHT_FAST CON 400


  FORWARD_LEFT_TURN CON 50
  FORWARD_RIGHT_TURN CON -50
  BACKWARD_LEFT_TURN CON -50
  BACKWARD_RIGHT_TURN CON 50

  FORWARD_LEFT_SLOW CON 200
  FORWARD_RIGHT_SLOW CON -200
  BACKWARD_LEFT_SLOW CON -200
  BACKWARD_RIGHT_SLOW CON 200

  FORWARD_LEFT_WALL CON 800
  FORWARD_RIGHT_WALL CON -800
  BACKWARD_LEFT_WALL CON -800
  BACKWARD_RIGHT_WALL CON 800

  RIGHT_GAIN CON 10
  RIGHT_ADJUST CON -40
  RIGHT_BACK_DISTANCE_THRESHOLD CON 140
  RIGHT_FRONT_DISTANCE_THRESHOLD CON 80
  INTERSECTION_DISTANCE_THRESHOLD CON 1000
  RIGHT_FRONT_DISTANCE_TOO_CLOSE CON 160
  RIGHT_FRONT_DISTANCE_TOO_FAR CON 120
  FRONT_LEFT_FIX CON 0
  BACK_RIGHT_FIX CON 18
  FRONT_RIGHT_FIX CON 0
  BACK_LEFT_FIX CON 0
  DISTANCE_M CON -8 'SLOPE TIMES 100
  DISTANCE_B CON 2138 'INTERCEPTTIMES 100

  'Timing constants
  STOP_TIME CON 50 'Time it takes to stop the robot. NOTE: Might need to tweak this
  TURN90_TIME CON 340 'Time it takes to turn the robot 90 degrees.  NOTE: will need to tweak this
  BACKUP_TIME CON 300 'Time it take to back a robot up enough to deactivate bumpers.  NOTE: Will need to be tweaked
  BUMPER_DEBOUNCE_TIME CON 10 'Time it takes a bumper switch to stop bounding
  TURN70_TIME CON 241 'Time it takes to turn 70 degrees
  TURN30_TIME CON 100 'Time it takes to to turn 30 degrees
  TURN9_TIME CON 30 'Time it takes to turn 9 degrees
  SCOOT_TIME CON 208
  TURN_WALL_TIME CON 60
  CORRECTION_ANGLE CON 300
  ANGLE_TOO_BIG CON 600
  UV_TIME CON 6000

  'Set up the I/O lines
  DIRS = I_O_DIR
  OUTS = I_O_INIT
  CONFIGPIN PULLUP,I_O_PULL

'--------------------------------------------------------------------------
'Program main loop. Done repeatedly.

PAUSE 5000
LeftSpeed = FORWARD_LEFT_SLOW
RightSpeed = BACKWARD_RIGHT_SLOW
GOSUB SetMotorSpeed
'------------------------------------------------------------------------------------
Start:
  I2CIN SDA, $d1, 0, [Ver, Ambient, Pix1, Pix2, Pix3, Pix4, Pix5, Pix6, Pix7, Pix8 ]
  DEBUG DEC3 Ambient,": ", DEC3 Pix1," ",DEC3 Pix2," ",DEC3 Pix3," ",DEC3 Pix4," ",DEC3 Pix5," ",DEC3 Pix6," ",DEC3 Pix7," ",DEC3 Pix8," ",CR
  GOSUB TestHigh
  IF Found = 0 THEN
    GOSUB TestMiddle
    IF Found = 0 THEN
      GOSUB TestLow
      IF Found = 0 THEN GOTO Start
    ENDIF
  ENDIF


  LeftSpeed = 0
  RightSpeed = 0
  GOSUB SetMotorSpeed
  PAUSE 1000
  I2CIN SDA, $d1, 0, [Ver, Ambient, Pix1, Pix2, Pix3, Pix4, Pix5, Pix6, Pix7, Pix8 ]
  DEBUG DEC3 Ambient,": ", DEC3 Pix1," ",DEC3 Pix2," ",DEC3 Pix3," ",DEC3 Pix4," ",DEC3 Pix5," ",DEC3 Pix6," ",DEC3 Pix7," ",DEC3 Pix8," ",CR
  GOSUB PinpointCandle
  STOP




TestMiddle:
  Found = 1
  IF Pix4 > (Ambient + PYRO_THRESH) THEN RETURN
  IF Pix5 > (Ambient + PYRO_THRESH) THEN RETURN
  Found = 0
  RETURN

TestLow:'was TestHigh 3/26/12
  Found = 1
  IF Pix6 > (Ambient + PYRO_THRESH) THEN RETURN
  IF Pix7 > (Ambient + PYRO_THRESH) THEN RETURN
  IF Pix8 > (Ambient + PYRO_THRESH) THEN RETURN
  Found = 0
  RETURN

TestHigh:'was TestLow 3/26/12
  Found = 1
  IF Pix1 > (Ambient + PYRO_THRESH) THEN RETURN
  IF Pix2 > (Ambient + PYRO_THRESH) THEN RETURN
  IF Pix3 > (Ambient + PYRO_THRESH) THEN RETURN
  Found = 0
  RETURN

PinpointCandle:
  I2CIN SDA, $d1, 0, [Ver, Ambient, Pix1, Pix2, Pix3, Pix4, Pix5, Pix6, Pix7, Pix8 ]
  DEBUG DEC3 Ambient,": ", DEC3 Pix1," ",DEC3 Pix2," ",DEC3 Pix3," ",DEC3 Pix4," ",DEC3 Pix5," ",DEC3 Pix6," ",DEC3 Pix7," ",DEC3 Pix8," ",CR
  GOSUB TestMiddle
  IF Found = 1 THEN
    LeftSpeed = FORWARD_LEFT_FAST
    RightSpeed = FORWARD_RIGHT_FAST
  ENDIF
  GOSUB TestHigh
  IF Found = 1 THEN
    LeftSpeed = FORWARD_LEFT_FAST
    RightSpeed = FORWARD_RIGHT_SLOW
  ENDIF
  GOSUB TestLow
  IF Found = 1 THEN
    LeftSpeed = FORWARD_LEFT_SLOW
    RightSpeed = FORWARD_RIGHT_FAST
  ENDIF
  GOSUB SetMotorSpeed
  GOSUB CheckWhiteLine
  IF WhiteLine = 0 THEN GOTO PinpointCandle
  LeftSpeed = 0
  RightSpeed = 0
  GOSUB SetMotorSpeed
  RETURN


'---------------------------------------------------------------------------------


SetMotorSpeed:
CMMD =$D0
ADDR =$01
LENG =$04
CKSUM =CMMD+ADDR+LENG+LeftSpeed.HIGHBYTE+LeftSpeed.LOWBYTE+RightSpeed.HIGHBYTE+RightSpeed.LOWBYTE
SEROUT FM,BAUD,[CMMD,ADDR,LENG,LeftSpeed.HIGHBYTE,LeftSpeed.LOWBYTE,Rightspeed.HIGHBYTE,RightSpeed.LOWBYTE,CKSUM]
SERIN TM,BAUD,150,NA_SDC1,[DATA1]

IF DATA1<>$6 THEN NA_SDC1
RETURN
NA_SDC1:
DEBUG "SETDCERROR",CR
RETURN

'BACKWARDS:
'LeftSpeed =-1023
'RightSpeed =1023
'GOSUB SetMotorSpeed
'PAUSE 500
'RETURN


'Checks whether front of robot is over white line.  Returns value in
'variable "WhiteLine."  If'"WhiteLine" is non-zero, robot is over line.

CheckWhiteLine:
  '(INH & WHITE_LINE_MASK) extracts the output of the white line detector,
  ' which is active low. However, it is easer to work with bits that
  'are active high, so the "... ^ WHITE_LINE_MASK" will flip the white line bit,
  'taking 0 to 1 and 1 to 0.  So, if any of the bumpers are 1, then WhiteLine
  'will be non-zero and we have a hit.
  WhiteLine = (INH & WHITE_LINE_MASK) ^ WHITE_LINE_MASK
  RETURN